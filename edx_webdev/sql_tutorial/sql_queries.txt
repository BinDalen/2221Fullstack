TODO: Create a table

CREATE TABLE flights (
    id SERIAL PRIMARY KEY,
    origin VARCHAR NOT NULL,
    destination VARCHAR NOT NULL,
    duration INTEGER NOT NULL
);

TODO: Insert a row (record)

INSERT INTO flights
    (origin, destination, duration)
    VALUES ('New York', 'London', 415);

?: SQL query examples

!: The query after SELECT indicates what columns (fields) are being selected
!: * is a wildcard that indicates 'all'
SELECT * FROM flights;
SELECT origin, destination FROM flights;

!: The column after WHERE indicates constraints on what records are being selected
SELECT * FROM flights WHERE id = 3;
SELECT * FROM flights WHERE origin = 'New York';
SELECT * FROM flights WHERE duration > 500;
SELECT * FROM flights WHERE destination = 'Paris' AND duration < '500';
SELECT * FROM flights WHERE destination = 'Paris' OR duration < '500';

?: If a SQL function (WHERE) is passed as a column (field) selector,
?: a column with the return value of that function will be returned

!: Useful functions include:
!: - AVG(field): returns the average value
!: - COUNT(*): returns the number of rows returned by the database
!: - MIN(field): returns the minimum value
!: - MAX(field): returns the maximum value
SELECT AVG(duration) FROM flights WHERE origin = 'New York';

!: LIKE is a keyword that takes a template string and returns all records where the field fits the template
!: % is a wildcard that will match any text. '%a%' - any row with 'a' in the specified field will be returned
SELECT * FROM flights WHERE origin LIKE '%a%';

!: LIMIT sets the maximum number of rows to be returned
SELECT * FROM flights LIMIT 2;

!: ORDER BY organizes rows by a given column in either ASC or DESC order before returning rows
SELECT * FROM flights ORDER BY duration ASC;
SELECT * FROM flights ORDER BY duration ASC LIMIT 3;

!: GROUP BY organizes rows by grouping the same values in a given column together
SELECT origin, COUNT(*) FROM flights GROUP BY origin;

!: HAVING is an optional specifier for GROUP BY which limits what rows are going to be returned. Similar to WHERE
SELECT origin, COUNT(*) FROM flights GROUP BY origin HAVING COUNT(*) > 1;

?: Updating data in a table

UPDATE flights
    SET duration = 430
    WHERE origin = 'New York'
    AND destination = 'London';

!: SET overwrites a field in all the records that match the WHERE query

? Deleting data from a table:

DELETE FROM flights
WHERE destination = 'Tokyo'